import os
import random
import re
import sys

DAMPING = 0.85
SAMPLES = 10000


def main():
    if len(sys.argv) != 2:
        sys.exit("Usage: python pagerank.py corpus")
    corpus = crawl(sys.argv[1])
    ranks = sample_pagerank(corpus, DAMPING, SAMPLES)
    print(f"PageRank Results from Sampling (n = {SAMPLES})")
    for page in sorted(ranks):
        print(f"  {page}: {ranks[page]:.4f}")
    ranks = iterate_pagerank(corpus, DAMPING)
    print(f"PageRank Results from Iteration")
    for page in sorted(ranks):
        print(f"  {page}: {ranks[page]:.4f}")


def crawl(directory):
    """
    Parse a directory of HTML pages and check for links to other pages.
    Return a dictionary where each key is a page, and values are
    a list of all other pages in the corpus that are linked to by the page.
    """
    pages = dict()

    # Extract all links from HTML files
    for filename in os.listdir(directory):
        if not filename.endswith(".html"):
            continue
        with open(os.path.join(directory, filename)) as f:
            contents = f.read()
            links = re.findall(r"<a\s+(?:[^>]*?)href=\"([^\"]*)\"", contents)
            pages[filename] = set(links) - {filename}

    # Only include links to other pages in the corpus
    for filename in pages:
        pages[filename] = set(
            link for link in pages[filename]
            if link in pages
        )

    return pages


def transition_model(corpus, page, damping_factor):
    """
    Return a probability distribution over which page to visit next,
    given a current page.

    With probability `damping_factor`, choose a link at random
    linked to by `page`. With probability `1 - damping_factor`, choose
    a link at random chosen from all pages in the corpus.
    """
    total_pages = len(corpus) 
    default_prob = 1/total_pages
    prob_dist = dict()
    num_related_pagues = len(corpus[page])
    # print('3--', corpus[page])

    try:
        for page_element in corpus:
            if num_related_pagues == 0:
                prob_dist[page_element] = default_prob
                # In other words, if a page has no links, we can pretend it has links to all pages in the corpus, including itself
            else:
                if page_element in corpus[page]:
                    # print('4--', page_element, num_related_pagues, damping_factor)
                    prob_dist[page_element] = (1/num_related_pagues)*damping_factor + default_prob*(1-damping_factor)
                else:
                    prob_dist[page_element] = default_prob*(1-damping_factor)
        # print('\n5--', prob_dist)
        return prob_dist
    except:
        raise NotImplementedError


def sample_pagerank(corpus, damping_factor, n):
    """
    Return PageRank values for each page by sampling `n` pages
    according to transition model, starting with a page at random.

    Return a dictionary where keys are page names, and values are
    their estimated PageRank value (a value between 0 and 1). All
    PageRank values should sum to 1.
    """
    
    # take a random page from corpus, remeber: The first sample should be generated by choosing from a page at random.
    random_page = random.choice(list(corpus.keys()))
    # print('1--', random_page)

    #The proportion of all the samples that corresponded to that page
    # Algo sobre / n 

    # How many times a page has been clicked on
    clicks_per_page = {key: 0 for key in corpus}
    # print('7a--', clicks_per_page)

    # The first sample should be generated by choosing from a page at random. 
    current_page = random_page

    try:
        for i in range(n):
            prob_dist = transition_model(corpus, current_page, damping_factor)
            kkeys = list(prob_dist.keys())
            values = list(prob_dist.values())

            # This is a one-element list, for that reason: [0]
            clicked_page = random.choices(kkeys, weights=values)[0]

            # Sum is over 'n' for get results in proportion of all samples 
            clicks_per_page[clicked_page] = clicks_per_page[clicked_page] + 1/n

            # print('7b--', clicks_per_page[clicked_page], clicked_page)
            # print('7--', clicked_page)
            # print('\n8a--', current_page, clicked_page)
            current_page = clicked_page
            # if i==10: break

        # print('\n8--', clicks_ratio)
        return clicks_per_page
    except:
        raise NotImplementedError


def iterate_pagerank(corpus, damping_factor):
    """
    Return PageRank values for each page by iteratively updating
    PageRank values until convergence.

    Return a dictionary where keys are page names, and values are
    their estimated PageRank value (a value between 0 and 1). All
    PageRank values should sum to 1.
    """
    n_pages = len(corpus)
    default_prob = 1/n_pages
    PR_prev = dict()
    PR_new = dict()
    formula_p1 = (1 - damping_factor) / n_pages

    try:
        for page in corpus:
            PR_new[page] = default_prob

        error = set()
        for page1, links in corpus.items():
            if len(links) == 0:
                for page2 in corpus:
                    corpus[page1].add(page2)
        while True:
            PR_prev = PR_new.copy()
            for page1 in corpus:
                
                corpus2 = corpus.copy()
                for page2 in corpus:
                    if page1 not in corpus[page2]:
                        del corpus2[page2]

                acum = 0
                for page3 in corpus2:
                    acum = acum + (PR_new[page3] / len(corpus2[page3]))
                
                formula = formula_p1 + damping_factor*acum
                PR_new[page1] = formula

                if abs(PR_prev[page1] - PR_new[page1]) <= 0.001:
                    error.add(page1)

            if len(error) == n_pages:
                return PR_new
            
    except:
        raise NotImplementedError


if __name__ == "__main__":
    main()
